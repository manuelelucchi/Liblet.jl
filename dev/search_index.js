var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#gettingstarted-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installation-1","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"You can install Liblet.jl throught Pkg","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"For example: ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"import Pkg\nPkg.add(\"Liblet\")","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"or ","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"(1.4) pkg> add Liblet","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Once you have it installed, you can","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"import Liblet","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"or","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"using Liblet","category":"page"},{"location":"gettingstarted/#","page":"Getting Started","title":"Getting Started","text":"Enjoy!","category":"page"},{"location":"gettingstarted/#First-Steps-1","page":"Getting Started","title":"First Steps","text":"","category":"section"},{"location":"man/automaton/#man-automaton-1","page":"Automaton","title":"Automaton","text":"","category":"section"},{"location":"man/automaton/#","page":"Automaton","title":"Automaton","text":"Using these types and methods, you can build a Finite State Automaton.","category":"page"},{"location":"man/automaton/#","page":"Automaton","title":"Automaton","text":"Automaton\n\nAutomaton(transitions::AbstractString, F::Union{Nothing,Set} = nothing, q0::Union{Nothing, AbstractString} = nothing)\n\nAutomaton(G::Grammar)\n\nδ(a::Automaton, X, x)","category":"page"},{"location":"man/automaton/#Liblet.Automaton","page":"Automaton","title":"Liblet.Automaton","text":"This type represents a (nondeterministic) finite automaton, defined as a tuple A=(NTtransitionsq0F)     Automaton(N::Iterable, T::Iterable, transitions::Iterable, q0::AbstractString, F::Iterable) Builds an Automaton obtained from the given components.\n\n\n\n\n\n","category":"type"},{"location":"man/automaton/#Liblet.Automaton","page":"Automaton","title":"Liblet.Automaton","text":"Automaton(transitions::AbstractString, F::Union{Nothing,Set} = nothing, q0::Union{Nothing, AbstractString} = nothing)::Automaton\n\nBuilds an Automaton obtained from the given transitions.\n\n\n\n\n\n","category":"type"},{"location":"man/automaton/#Liblet.Automaton-Tuple{Grammar}","page":"Automaton","title":"Liblet.Automaton","text":"Automaton(G::Grammar)::Automaton\n\nBuilds the Automaton corresponding to the given regular Grammar.\n\n\n\n\n\n","category":"method"},{"location":"man/automaton/#Liblet.δ-Tuple{Automaton,Any,Any}","page":"Automaton","title":"Liblet.δ","text":"δ(a::Automaton, X, x)\n\nThe transition function.\n\nThis function returns the set of states reachable from the given state and input symbol.\n\n\n\n\n\n","category":"method"},{"location":"man/transition/#man-transition-1","page":"Transition","title":"Transition","text":"","category":"section"},{"location":"man/transition/#","page":"Transition","title":"Transition","text":"A simple transition, identified by a from state, a label, and a to state.","category":"page"},{"location":"man/transition/#","page":"Transition","title":"Transition","text":"\nTransition\n\nparsetransitions(t::AbstractString)\n","category":"page"},{"location":"man/transition/#Liblet.Transition","page":"Transition","title":"Liblet.Transition","text":"This type represents an Automaton transition. It has a from starting state and a to destination state and a label\n\nTransition(from::Union{AbstractString, Iterable}, label::AbstractString, to::Union{AbstractString, Iterable})\n\nBuild a transition based on the given states.\n\n\n\n\n\n","category":"type"},{"location":"man/transition/#Liblet.parsetransitions-Tuple{AbstractString}","page":"Transition","title":"Liblet.parsetransitions","text":"parsetransitions(t::AbstractString)::Array{Transition}\n\nBuilds an array of Transition obtained from the given string.\n\n\n\n\n\n","category":"method"},{"location":"tutorials/automatons/#tutorials-automatons-1","page":"Automatons","title":"Automatons","text":"","category":"section"},{"location":"tutorials/automatons/#","page":"Automatons","title":"Automatons","text":"See full example here","category":"page"},{"location":"tutorials/derivations/#tutorials-derivations-1","page":"Grammars & Derivations","title":"Grammars & Derivations","text":"","category":"section"},{"location":"tutorials/derivations/#","page":"Grammars & Derivations","title":"Grammars & Derivations","text":"See full example here","category":"page"},{"location":"man/production/#Productions-1","page":"Productions","title":"Productions","text":"","category":"section"},{"location":"man/production/#","page":"Productions","title":"Productions","text":"Productions are the most basic thing in languages, translators and compilers.","category":"page"},{"location":"man/production/#Introduction-1","page":"Productions","title":"Introduction","text":"","category":"section"},{"location":"man/production/#","page":"Productions","title":"Productions","text":"AbstractProduction","category":"page"},{"location":"man/production/#Liblet.AbstractProduction","page":"Productions","title":"Liblet.AbstractProduction","text":"Supertype for productions. Production and other types are subtypes of this.\n\n\n\n\n\n","category":"type"},{"location":"man/production/#man-production-1","page":"Productions","title":"Production","text":"","category":"section"},{"location":"man/production/#","page":"Productions","title":"Productions","text":"Production\n\nparseproduction(input::AbstractString, iscontextfree::Bool)\n\nsuchthat()\n\nastype0(p::Production)","category":"page"},{"location":"man/production/#Liblet.Production","page":"Productions","title":"Liblet.Production","text":"A grammar production, consisting of a left side and a right side\n\n\n\n\n\n","category":"type"},{"location":"man/production/#Liblet.parseproduction-Tuple{AbstractString,Bool}","page":"Productions","title":"Liblet.parseproduction","text":"parseproduction(input::AbstractString, iscontextfree::Bool = true)::Array{Production}\n\nReturns an Array of Production obtained from the given string.\n\n\n\n\n\n","category":"method"},{"location":"man/production/#Liblet.suchthat-Tuple{}","page":"Productions","title":"Liblet.suchthat","text":"suchthat(;left::AbstractString = nothing, right::AbstractString = nothing, rightlen::Int = nothing, right_is_suffix_of::AbstractString = nothing)::Array\n\nA predicate (that is a one-argument function that retuns true or false) that is true weather the production given as argument satisfies all the predicates given by the named arguments.\n\n\n\n\n\n","category":"method"},{"location":"man/production/#Liblet.astype0-Tuple{Production}","page":"Productions","title":"Liblet.astype0","text":"astype0(p::Production)::Production\n\nReturns a new Production that is type 0\n\n\n\n\n\n","category":"method"},{"location":"man/production/#man-item-1","page":"Productions","title":"Item","text":"","category":"section"},{"location":"man/production/#","page":"Productions","title":"Productions","text":"For the purpose of presenting the Knuth Automaton in the context of LR(0) parsing, Item is an extended Production that includes a dot.","category":"page"},{"location":"man/production/#","page":"Productions","title":"Productions","text":"Item\n\nparseitem(input::AbstractString, iscontexfree::Bool)\n\nastype0(i::Item)\n\nafterdotsymbol(item::Item)\n\nadvance(item::Item, x::AbstractString)","category":"page"},{"location":"man/production/#Liblet.Item","page":"Productions","title":"Liblet.Item","text":"A dotted production, also known as an Item.\n\n\n\n\n\n","category":"type"},{"location":"man/production/#Liblet.parseitem-Tuple{AbstractString,Bool}","page":"Productions","title":"Liblet.parseitem","text":"parseitem(input::AbstractString, iscontextfree::Bool = true)::Array{Item}\n\nReturns an Array of Item obtained from the given string.\n\n\n\n\n\n","category":"method"},{"location":"man/production/#Liblet.astype0-Tuple{Item}","page":"Productions","title":"Liblet.astype0","text":"astype0(p::Item)::Item\n\nReturns a new Item that is type 0\n\n\n\n\n\n","category":"method"},{"location":"man/production/#Liblet.afterdotsymbol-Tuple{Item}","page":"Productions","title":"Liblet.afterdotsymbol","text":"afterdotsymbol(item::Item)::Union{AbstractString,Nothing}\n\nReturns the symbol after the dot.\n\n\n\n\n\n","category":"method"},{"location":"man/production/#Liblet.advance-Tuple{Item,AbstractString}","page":"Productions","title":"Liblet.advance","text":"advance(item::Item, x::AbstractString)::Item\n\nReturns a new Item obtained advancing the dot past the given symbol.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#man-derivation-1","page":"Derivation","title":"Derivation","text":"","category":"section"},{"location":"man/derivation/#","page":"Derivation","title":"Derivation","text":"You can build derivations from a given Grammar.","category":"page"},{"location":"man/derivation/#","page":"Derivation","title":"Derivation","text":"\nDerivation\n\nDerivation(G::Grammar)\n\nnext(d::Derivation, prod::Int, pos::Int)\n\nnext(d::Derivation, prod::Production, pos::Int)\n\nnext(d::Derivation, prod::AbstractArray{Tuple{Int, Int}})\n\nleftmost(d::Derivation, prod::Int)\n\nleftmost(d::Derivation, prod::Production)\n\nleftmost(d::Derivation, prod::AbstractArray{Production})\n\nleftmost(d::Derivation, prod::AbstractArray{Int})\n\nrightmost(d::Derivation, prod::Int)\n\nrightmost(d::Derivation, prod::Production)\n\nrightmost(d::Derivation, prod::AbstractArray{Int})\n\nrightmost(d::Derivation, prod::AbstractArray{Production})\n\npossiblesteps(d::Derivation; prod::Union{Int, Nothing} = nothing, pos::Union{Int, Nothing} = nothing)\n\nsententialform(d::Derivation)\n\nsteps(d::Derivation)\n","category":"page"},{"location":"man/derivation/#Liblet.Derivation","page":"Derivation","title":"Liblet.Derivation","text":"A derivation.\n\n\n\n\n\n","category":"type"},{"location":"man/derivation/#Liblet.Derivation-Tuple{Grammar}","page":"Derivation","title":"Liblet.Derivation","text":"Derivation(G::Grammar)::Derivation\n\nBuilds a Derivation from a given Grammar.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.next-Tuple{Derivation,Int64,Int64}","page":"Derivation","title":"Liblet.next","text":"next(d::Derivation, prod::Int, pos::Int)::Derivation\n\nApplies the specified production to the given position in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.next-Tuple{Derivation,Production,Int64}","page":"Derivation","title":"Liblet.next","text":"next(d::Derivation, prod::Production, pos::Int)::Derivation\n\nApplies the specified Production to the given position in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.next-Tuple{Derivation,AbstractArray{Tuple{Int64,Int64},N} where N}","page":"Derivation","title":"Liblet.next","text":"next(d::Derivation, prod::Int, pos::Int)::Derivation\n\nApplies the specified productions to the given position in the sentential form, one by one\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.leftmost-Tuple{Derivation,Int64}","page":"Derivation","title":"Liblet.leftmost","text":"leftmost(d::Derivation, prod::Int)::Derivation\n\nPerforms a leftmost derivation step. Applies the specified production to the current leftmost nonterminal in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.leftmost-Tuple{Derivation,Production}","page":"Derivation","title":"Liblet.leftmost","text":"leftmost(d::Derivation, prod::Production)::Derivation\n\nPerforms a leftmost derivation step. Applies the specified Production to the current leftmost nonterminal in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.leftmost-Tuple{Derivation,AbstractArray{Production,N} where N}","page":"Derivation","title":"Liblet.leftmost","text":"leftmost(d::Derivation, prod::AbstractArray{Production})::Derivation\n\nPerforms a leftmost derivation step. Applies the specified productions to the current leftmost nonterminal in the sentential form, one by one.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.leftmost-Tuple{Derivation,AbstractArray{Int64,N} where N}","page":"Derivation","title":"Liblet.leftmost","text":"leftmost(d::Derivation, prod::AbstractArray{Int})::Derivation\n\nPerforms a leftmost derivation step. Applies the specified productions to the current leftmost nonterminal in the sentential form, one by one.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.rightmost-Tuple{Derivation,Int64}","page":"Derivation","title":"Liblet.rightmost","text":"rightmost(d::Derivation, prod::Int)::Derivation\n\nPerforms a rightmost derivation step. Applies the specified production(s) to the current rightmost nonterminal in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.rightmost-Tuple{Derivation,Production}","page":"Derivation","title":"Liblet.rightmost","text":"rightmost(d::Derivation, prod::Production)::Derivation\n\nPerforms a rightmost derivation step. Applies the specified Production to the current rightmost nonterminal in the sentential form.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.rightmost-Tuple{Derivation,AbstractArray{Int64,N} where N}","page":"Derivation","title":"Liblet.rightmost","text":"rightmost(d::Derivation, prod::Int)::Derivation\n\nPerforms a rightmost derivation step. Applies the specified productions to the current rightmost nonterminal in the sentential form, one by one.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.rightmost-Tuple{Derivation,AbstractArray{Production,N} where N}","page":"Derivation","title":"Liblet.rightmost","text":"rightmost(d::Derivation, prod::AbstractArray{Production})::Derivation\n\nPerforms a rightmost derivation step. Applies the specified productions to the current rightmost nonterminal in the sentential form, one by one.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.possiblesteps-Tuple{Derivation}","page":"Derivation","title":"Liblet.possiblesteps","text":"possiblesteps(d::Derivation; prod::Union{Int, Nothing} = nothing, pos::Union{Int, Nothing} = nothing)\n\nReturns all the possible steps that can be performed given the grammar and current sentential form.\n\nDetermines all the position of the sentential form that correspond to the left-hand side of one of the production in the grammar, returning the position and production number. If a production is specified, it yields only the pairs referring to it; similarly, if a position is specified, it yields only the pairs referring to it.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.sententialform-Tuple{Derivation}","page":"Derivation","title":"Liblet.sententialform","text":"sententialform(d::Derivation)\n\nReturns the sentential form of the Derivation.\n\n\n\n\n\n","category":"method"},{"location":"man/derivation/#Liblet.steps-Tuple{Derivation}","page":"Derivation","title":"Liblet.steps","text":"steps(d::Derivation)\n\nReturns the steps performed by the Derivation\n\n\n\n\n\n","category":"method"},{"location":"man/grammar/#man-grammar-1","page":"Grammar","title":"Grammar","text":"","category":"section"},{"location":"man/grammar/#","page":"Grammar","title":"Grammar","text":"\nGrammar\n\nGrammar(N, T, P, S) \n\nGrammar(prods::AbstractString, iscontextfree = true)\n\nalternatives(g::Grammar, N::Union{AbstractString, Iterable})\n\nrestrict(g::Grammar, symbols::Set)\n","category":"page"},{"location":"man/grammar/#Liblet.Grammar","page":"Grammar","title":"Liblet.Grammar","text":"A grammar, represented as a tuple G=(NTPS)\n\n\n\n\n\n","category":"type"},{"location":"man/grammar/#Liblet.Grammar-NTuple{4,Any}","page":"Grammar","title":"Liblet.Grammar","text":"Grammar(N::Set, T::Set, P::Array, S::AbstractString)::Grammar\n\nBuilds a Grammar obtained from the given string of productions.\n\n\n\n\n\n","category":"method"},{"location":"man/grammar/#Liblet.Grammar","page":"Grammar","title":"Liblet.Grammar","text":"Grammar(prods::AbstractString, iscontextfree = true)::Grammar\n\nBuilds a Grammar obtained from the given string of productions.\n\n\n\n\n\n","category":"type"},{"location":"man/grammar/#Liblet.alternatives-Tuple{Grammar,Union{AbstractString, AbstractSet, AbstractArray}}","page":"Grammar","title":"Liblet.alternatives","text":"alternatives(g::Grammar, N::Array)::Array\n\nReturns all the right-hand sides alternatives matching the given nonterminal.\n\n\n\n\n\n","category":"method"},{"location":"man/grammar/#Liblet.restrict-Tuple{Grammar,Set}","page":"Grammar","title":"Liblet.restrict","text":"restrict(g::Grammar, symbols::Set)\n\nReturns a Grammar using only the given symbols.\n\n\n\n\n\n","category":"method"},{"location":"#Liblet.jl-1","page":"Home","title":"Liblet.jl","text":"","category":"section"},{"location":"#Getting-Started-1","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Just follow the guide and you'll be ready in less than 5 minutes!","category":"page"},{"location":"#Manual-1","page":"Home","title":"Manual","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"For now, Liblet.jl exposes the following macro arguments:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Productions\nItems\nGrammars\nDerivations\nTransitions\nAutomatons","category":"page"},{"location":"#Tutorials-1","page":"Home","title":"Tutorials","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This library comes with a set of examples and guides","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Derivations & Grammars Tutorial\nAutomatons Tutorial","category":"page"}]
}
